#!/usr/bin/env node
"use strict";var e=require("kleur"),t=require("prompts"),o=require("fs"),r=require("path"),s=require("url"),n=require("child_process"),a=require("commander");const i=()=>({onCancel:()=>{process.exit()}}),l=e=>o.lstatSync(e).isDirectory(),c=e=>e.replace(/^./g,e[0].toUpperCase()),m=e=>e.replace(/(^[\\/]|[\\/]$)/g,"").replace(/\\/g,"/"),p=e=>{const t=m(e),o=t.split("/");return o.length<=4?t:o.reduce(((e,t,o,r)=>((o<1||o>r.length-4)&&(o===r.length-3&&e.push("..."),e.push(t)),e)),[]).join("/")},d=e=>{process.stdout.write(`${e}\n`)},f=({root:e,from:t,to:o})=>{const s=r.isAbsolute(o)?m(o):m(r.resolve(e,m(o)));return m(r.relative(t,s))},u=e=>{if(void 0!==e)return e.includes(" ")?e.trim().replace(/\s{1,}/g," ").split(" ").reduce(((e,t)=>(e.some((e=>e===t))||e.push(t),e)),[]):[e]},g=e=>{if(e&&0!==e.length)return e.split("").reduce(((e,t)=>0===e.length||t===t.toUpperCase()&&/\w/.test(t)?(e.push(t),e):(e[e.length-1]+=t,e)),[])},h=e=>e.replace(/(\d\D|\D\d)/g,(e=>`${e[0]}-${e[1]}`)).replace(/([A-Z])/g,"-$1").replace(/[^a-zA-Z0-9]/g,"-").split("-").filter((e=>e)),y=({name:e,isFolder:t=!1,toComponent:o=!1,processFileAndFolderName:r})=>r?o?j(e,"PascalCase"):"function"==typeof r?r(e,h(e),t):j(e,r):e,j=(e,t)=>{const o=h(e).map((e=>e.toLocaleLowerCase()));switch(t){case"camelCase":return o.map(((e,t)=>0===t?e:c(e))).join("");case"PascalCase":return o.map(c).join("");case"dash-case":return o.join("-");case"snake_case":return o.join("_")}},w=({fileNameTemplate:e,objectName:t,processFileAndFolderName:o})=>e.replace(/\[name]/g,y({name:t,processFileAndFolderName:o})),F=({fileNameTemplate:e,objectName:t,root:s,project:n,processFileAndFolderName:a,resultPath:i,projectRootPath:l})=>{const c=r.join(s,n,l,i,y({name:t,isFolder:!0,processFileAndFolderName:a})),m=w({fileNameTemplate:e,objectName:t,processFileAndFolderName:a});return o.existsSync(r.resolve(c,m))},N=({withRequired:e=!1,commandLineFlags:{files:t},templates:o})=>{const r=Object.entries(o).filter((([,e])=>!e.optional)).map((([e])=>e));let s=t.replace(/\[\d*?]/g,"").split(" ");e||(s=s.filter((e=>!r.includes(e))));const n=s.filter((e=>!Object.prototype.hasOwnProperty.call(o,e)&&"no"!==e));return{fileTemplates:s,undefinedFileTemplates:n,requiredTemplateNames:r}},$=e=>o.promises.access(e).then((()=>!0),(()=>!1)),v=async({templateName:o,commandLineFlags:r})=>{if(r.update)return[];let s=[r.name];do{let r=[""];if(r=s[0]?u(s[0]):(await t({type:"text",name:"componentName",message:`What is the ${o} name? (ExampleName)`,format:e=>u(e)},i())).componentName,void 0===r)return process.exit(),[];if(r.some((e=>0===e.length))){d(e.yellow(`${c(o)} name must have at least one character.\nExample: DocumentModal`));continue}const n=/[^\w\d-_]/g;r.some((e=>n.test(e)))?d(e.yellow(`${c(o)} name must contain only letters, numbers, dashes or underscores.\nExample: DocumentModal`)):s=r}while(!s[0]);return s.map((e=>j(e,"PascalCase")))},x=(e,t,o)=>e.filter(((e,r)=>""===t||!(0===r||!o&&1===r)&&(e.title.toLocaleLowerCase().includes(t.toLocaleLowerCase())||g(t)?.every((t=>g(e.title)?.some((e=>e.startsWith(t)))))))),P=async({root:s,commandLineFlags:n,config:{folderPath:a,processFileAndFolderName:c},project:f,templateName:u,projectRootPathInput:g,resultPathInput:h})=>{const{dest:j,update:w,skipSearch:F}=n,N="string"==typeof a?[a]:a,$=N.filter((e=>o.existsSync(r.resolve(s,f,e))));let P=g??j;if(!P){if(0===$.length)return console.error(e.red(`Error: There is no any folder for ${u} from the list below`)),console.error(e.yellow(N.map((e=>r.resolve(s,f,e))).join("\n"))),process.exit(),{componentNames:[],projectRootPath:P,resultPath:h??""};P=1===$.length?$[0]:await(async e=>{const{path:o}=await t({type:"select",name:"path",message:"Select path to create component",hint:"Select using arrows and press Enter",choices:e.map((e=>({title:e.split("/").reverse().find(Boolean)??"",value:e,description:e}))),initial:0},i());return o})($)}h&&h.split("/").forEach((t=>{d(`${e.green("√")} Select destination folder for component ${e.gray("»")} ${t}`)}));let A=null,b=h??".";if(F)A=b;else for(;null===A;){const s=r.resolve(f,P,b);try{await o.promises.stat(s)}catch(t){return console.error(e.red(`Error: There is no folder for ${u}`),e.yellow(s)),console.error(t),process.exit(),{componentNames:[],projectRootPath:P,resultPath:h??""}}const n=(await o.promises.readdir(r.resolve(f,P,b))).filter((e=>l(r.resolve(f,P,b,e))));if(0===n.length){A=r.join(b);continue}const a=[".","./",".\\"].includes(b),c=n.map((e=>({title:e,value:e,description:p(r.join(f,P,b,e))})));w&&a||c.unshift({title:w?">> This <<":">> Here <<",value:1,description:p(r.join(f,P,b))}),a||c.unshift({title:"< Back",value:-1,description:p(r.join(f,P,b,"../"))});let m=!1;const{folder:d}=await t({type:"autocomplete",name:"folder",message:w?`Select ${u} to update`:`Select destination folder for ${u}`,hint:"Select using arrows and press Enter",choices:c.map((t=>({...t,description:e.yellow(t.description)}))),initial:a?0:1,onState(){""===this.input&&m?(this.select=a?0:1,m=!1):""===this.input||m||(this.select=0,m=!0)},suggest:(e,t)=>Promise.resolve(x(t,e,a))},i());1===d?A=b:b=-1===d?r.join(b,"../"):r.join(b,d)}if(P=m(P),A=m(A),w){const e=A.split("/");return A=e.slice(0,e.length-1).join("/"),{resultPath:A,projectRootPath:P,componentNames:[y({name:e[e.length-1],isFolder:!0,toComponent:!0,processFileAndFolderName:c})]}}return{componentNames:await v({commandLineFlags:n,templateName:u}),resultPath:A,projectRootPath:P}},A="rcci.config.js",b="rcci.config.cjs",S="reactcci",L="\nOptions:\n    ↑/↓: Select file\n    ←/→/[Space]: Check/uncheck file\n    a: Select all\n    Enter/Return: End settings\n",C=e=>`${e.replace(/(^\/|^\\|\/$|\\$)/g,"")}/`,R=async e=>import("win32"===process.platform&&r.isAbsolute(e)?s.pathToFileURL(e).toString():e),T=t=>{d(`${e.green("√")} Selected project ${e.gray("»")} ${t}`)},k=async({root:e,moduleRoot:t,fileName:s,insertionData:n,config:{templatesFolder:a,placeholders:i}})=>{const l=r.resolve(t,"templates"),c=await o.existsSync(r.join(e,a))?r.resolve(e,a):l,m=r.resolve(c,s);if(!o.existsSync(m))return"";let p=(await o.promises.readFile(m)).toString();return Object.entries(i).forEach((([e,t])=>{new RegExp(`#${e}#`,"gim").test(p)&&(p=p.replace(new RegExp(`#${e}#`,"gim"),t(n)))})),p},E=async({name:o,files:r,commandLineFlags:s})=>{if(s.files){const t=((e,t)=>{const o=e.split(" "),r=o.findIndex((e=>e.startsWith(`${t}[`)&&/\[\d+?]/.test(e.replace(t,""))));if(-1!==r)return parseInt((/\d+/.exec(o[r])??["0"])[0],10)})(s.files,o);if(void 0!==t)return r[t]||(console.error(e.red(`Error: ${e.yellow(t)} is incorrect index for ${e.yellow(o)}`)),console.error(`Max value is: ${e.yellow(r.length-1)}`),process.exit()),r[t]}const{file:n}=await t({type:"select",name:"file",message:`Select type of ${e.reset().yellow(o)} file`,hint:"Select using arrows and press Enter",choices:r.map((e=>({title:e.description,value:e}))),initial:0},i());return n},O=async({root:o,commandLineFlags:r,config:{templates:s,processFileAndFolderName:n},project:a,componentNames:l,resultPath:c,projectRootPath:m})=>{const p=l[0],{fileTemplates:d,undefinedFileTemplates:f}=N({commandLineFlags:r,templates:s});if(r.files)return f.length>0?(console.error("Error: Undefined file templates:"),console.error(f.join("\n")),void process.exit()):d;const u=Object.entries(s).map((([t,r])=>{const{default:s=!0,optional:i=!1,name:l}=r,d=w({fileNameTemplate:l,objectName:p,processFileAndFolderName:n}),f=F({root:o,fileNameTemplate:l,objectName:p,processFileAndFolderName:n,project:a,resultPath:c,projectRootPath:m});return{title:`${t}${e.reset(` (${f?"Replace":"Create"}: ${e.yellow(d)})`)}`,value:t,selected:i&&s&&!f||!i&&!f,exists:f}}));let g=!1;return(await t({type:"multiselect",name:"templateNames",message:"Select files to replace or create",instructions:L,choices:u,onRender(){if(!g){const e=u.findIndex((e=>e.selected));this.cursor=-1!==e?e:0,g=!0}}},i())).templateNames},W=async s=>{const{commandLineFlags:a,config:l,project:p,templateName:u,componentNames:g,projectRootPath:h,resultPath:v}=s,{processFileAndFolderName:x}=l,P=a.update?await O(s):await(async({commandLineFlags:e,config:{templates:o}})=>{const{fileTemplates:r,undefinedFileTemplates:s,requiredTemplateNames:n}=N({commandLineFlags:e,templates:o});let a=[];if(e.files){if(s.length>0)return console.error("Error: Undefined file templates:"),console.error(s.join("\n")),void process.exit();r.includes("no")||(a=r)}else{const e=Object.entries(o).filter((([,e])=>e.optional));e.length&&(a=(await t({type:"multiselect",name:"templateNames",message:"Select files to generate",instructions:L,choices:e.map((([e,t])=>{const{default:o=!0}=t;return{title:e,value:e,selected:o}}))},i())).templateNames)}return[...n,...a]})(s),A={};for(const[e,{name:t,file:o}]of Object.entries(l.templates)){const r=P.includes(e);if(Array.isArray(o)&&r){const s=await E({commandLineFlags:a,name:e,files:o});A[e]={name:t,file:s.name,type:s.description,selected:r}}else A[e]={name:t,file:o,selected:r}}const b={};for(const e of g)b[e]=Object.fromEntries(Object.entries(A).filter((([,t])=>t.selected||F({...s,fileNameTemplate:t.name,objectName:e,processFileAndFolderName:x}))).map((([t,o])=>[t,{...o,name:w({fileNameTemplate:o.name,objectName:e,processFileAndFolderName:x})}])));if(!l.skipFinalStep){for(const t of g)a.update?d(`\nUpdating ${u} ${e.yellow(t)}`):d(`\nCreating ${u} ${e.yellow(t)}`),d(`Files:\n${Object.entries(b[t]).filter((([,e])=>e.selected)).map((([t,o])=>`- ${t}${o.type?` (${e.yellow(o.type)})`:""}${e.gray(` - ${o.name}`)}`)).join("\n")}`);d(`\nFolder: ${e.yellow(r.join(p,h,v))}`)}if(l.skipFinalStep||a.sls||await(async()=>{const{agree:e}=await t({type:"toggle",name:"agree",message:"Is everything correct?",initial:!0,active:"Yes",inactive:"No"},i());return e})()){await(async({root:e,moduleRoot:t,config:s,project:n,templateName:a,componentNames:i,projectRootPath:l,resultPath:c,componentFileList:p})=>{const{processFileAndFolderName:d}=s;for(const u of i){const i=p[u],g=r.join(e,n,l,c,y({name:u,isFolder:!0,processFileAndFolderName:d}));await $(g)||await o.promises.mkdir(g);const h=m(r.resolve(e,n,l,c,u)),w={project:n,componentName:u,objectName:u,objectType:a,pathToObject:m(r.join(n,l)),destinationFolder:m(c),objectFolder:h,relativeObjectFolder:m(r.join(n,l,c,u)),filePrefix:y({name:u,isFolder:!1,processFileAndFolderName:d}),folderName:y({name:u,isFolder:!0,processFileAndFolderName:d}),files:i,getRelativePath:t=>f({root:e,from:h,to:t}),join:(...e)=>m(r.join(...e)),stringToCase:(e,t)=>{if(["camelCase","PascalCase","snake_case","dash-case"].includes(t))return j(e,t);throw new Error("Unknown case")}};for(const n of Object.values(i)){if(!n.selected)continue;const a=r.join(n.name).split(r.sep).filter((e=>e)),i=a[a.length-1],l=a.slice(0,a.length-1);if(l.length>0){for(let e=0;e<l.length;e++){const t=r.join(g,...l.slice(0,e+1));o.existsSync(t)||await o.promises.mkdir(t)}w.getRelativePath=t=>f({root:e,from:r.resolve(h,l.join("/")),to:t})}const c=n.file?await k({root:e,moduleRoot:t,fileName:n.file,insertionData:w,config:s})??"":"";await o.promises.writeFile(r.join(g,...l,i),c)}}})({...s,componentFileList:b}),await(async({root:t,config:{afterCreation:o,processFileAndFolderName:s},project:a,componentNames:i,projectRootPath:l,resultPath:c,componentFileList:m})=>{if(o)for(const[p,f]of Object.entries(o)){let o=!0;for(const u of i){const g=Object.values(m[u]).filter((e=>e.selected)),h=r.join(t,a,l,c,y({name:u,isFolder:!0,processFileAndFolderName:s}));if(f.extensions&&!f.extensions.some((e=>g.some((t=>t.name.endsWith(e))))))break;o&&(d(`Executing ${e.yellow(p)} script:`),o=!1),i.length>1&&d(`  ${u}`);for(const t of g)try{if(!f.extensions||f.extensions.some((e=>t.name.endsWith(e)))){const o=r.join(h,t.name);n.execSync(f.cmd.replace("[filepath]",o)),d(`${i.length>1?"    ":"  "}${e.green("√")} ${t.name}`)}}catch(o){console.error(e.red(`Unexpected error during processing ${e.yellow(t.name)} with ${e.yellow(p)} command`)),console.error(o)}}}})({...s,componentFileList:b});const t=g.length>1?"s are ":" is ",i=a.update?"updated":"created";d(e.green(`\n${c(u)}${t}${i}!!! \\(•◡ •)/ `))}else d("No? Let's build another one! (◉ ◡ ◉ )")};(async()=>{try{const s=process.cwd(),n=(()=>{const e=process.argv[1].split(r.sep),t=e.findIndex((e=>"node_modules"===e));return-1===t?e.slice(0,e.length-2).join(r.sep):[...e.slice(0,t+1),S].join(r.sep)})(),c=(()=>{a.program.option("-u, --update","update mode, to add or replace files in existent object"),a.program.option("-n, --name <type>","object name"),a.program.option("-t, --template <type>","template name"),a.program.option("-d, --dest <type>","path for creation"),a.program.option("-s, --skip-search","skip search (default or destination folder)"),a.program.option("-p, --project <type>","project name"),a.program.option("-f, --files <type>","file types (style, test, stories)"),a.program.option("--sls","skip last step"),a.program.option("--nfc","without first component after initialization"),a.program.parse((e=>{let t=!1;return e.reduce(((e,o,r,s)=>["-n","--name","-f","--files"].includes(s[r-1])?(t=!0,e.push(o),e):(o.startsWith("-")&&(t=!1),t?(e[e.length-1]+=` ${o}`,e):(e.push(o),e))),[])})(process.argv));const{update:e=!1,skipSearch:t=!1,sls:o=!1,nfc:r=!1,dest:s="",name:n="",template:i="",project:l="",files:c=""}=a.program.opts()||{};return{update:e,skipSearch:t,sls:o,nfc:r,dest:s,name:n,template:i,project:l,files:c}})();await(async({root:s,moduleRoot:n,commandLineFlags:a})=>{const l=r.resolve(s,b);if(await $(l))return;const c=r.resolve(s,A);if(await $(c))return d(`Please rename file ${e.yellow(A)} to ${e.yellow(b)}`),void process.exit();d(`Hello!\nWe haven't find configuration file (${e.yellow(b)}).`),d("It seems like a first run, doesn't it?");const{agree:m}=await t({type:"toggle",name:"agree",message:"Would you like to start configuration? It will be quick!",initial:!0,active:"Yes",inactive:"No"},i());if(!m)return d("See you next time!"),void process.exit();d(`${e.gray("By default, CLI use basic templates to create a component.")}`);const{templatesAgreement:p}=await t({type:"toggle",name:"templatesAgreement",message:"Would you like to create a template folder to set them up?",initial:!0,active:"Yes",inactive:"No"},i());let f="templates";p&&(f=(await t({type:"text",name:"templateFolderName",message:"What is a template folder name?",initial:f},i())).templateFolderName);const u=r.resolve(n,"defaultConfig.cjs"),g=(await o.promises.readFile(u)).toString();if(await o.promises.writeFile(r.join(s,b),g.replace(/(templatesFolder: ')(\w*?)(')/g,`$1${f}$3`)),d(`Config file ${e.yellow(b)} is created.`),p){const e=r.resolve(s,f);await $(e)||await o.promises.mkdir(e);const t=r.resolve(n,"templates"),a=await o.promises.readdir(t);d("Generated templates:");for(const s of a){const n=(await o.promises.readFile(r.join(t,s))).toString();await o.promises.writeFile(r.join(e,s),n),d(` - ${f}/${s}`)}}if(d(e.green("Well done! Configuration is finished!")),a.nfc)process.exit();else{const{firstComponentAgreement:o}=await t({type:"toggle",name:"firstComponentAgreement",message:"Would you like to create your first component?",initial:!0,active:"Yes",inactive:"No"},i());if(!o)return d("Well, see you next time!"),d(`You can set up everything you need in the ${e.yellow(b)} file.`),d("After configuration just run me again (◉ ◡ ◉ )"),void process.exit()}})({root:s,moduleRoot:n,commandLineFlags:c});let p=await(async({root:e})=>{let t=(await R(r.resolve(__dirname,"../defaultConfig.cjs"))).default;const s=r.resolve(e,b);if(o.existsSync(s)){const e=(await R(s)).default;t={...t,...e,placeholders:{...t.placeholders,...e.placeholders}},Array.isArray(t.folderPath)?t.folderPath=t.folderPath.map((e=>C(e))):t.folderPath=C(t.folderPath)}return t})({root:s});await(async({config:{templates:t,afterCreation:o,processFileAndFolderName:r}})=>{const s=()=>{process.exit(1)};if(Array.isArray(t)&&(t.some((e=>!e.name))&&(console.error(e.red("Template name must be declared")),s()),t.some((e=>t.filter((t=>t.name===e.name)).length>1))&&(console.error(e.red("Template name must be unique, please revise config file")),s())),r&&"function"!=typeof r){const t=["camelCase","PascalCase","snake_case","dash-case"];t.some((e=>e===r))||(console.error(e.red(`Unknown config type in "processFileAndFolderName" field: ${e.yellow(r)}`)),console.error(`Available cases:\n- ${t.join("\n- ")}`),s())}if(o)for(const[t,r]of Object.entries(o))r.cmd||(console.error(e.red(`Undeclared "cmd" option for afterCreation script ${e.yellow(t)}`)),s()),r.extensions&&!Array.isArray(r.extensions)&&(console.error(e.red(`The option "extension" for afterCreation script ${e.yellow(t)} must be an array`)),s()),r.cmd.includes("[filepath]")||(console.error(e.red(`Wrong "cmd" option for afterCreation script ${e.yellow(t)}`)),s())})({config:p});const{config:f,templateName:u}=await(async({commandLineFlags:{template:o},config:r})=>{const{templates:s}=r;let n="component";if(Array.isArray(s)){if(o){if(!s.map((e=>e.name)).includes(o))return console.error(e.red(`Error: There is no ${o} template`)),process.exit(),{config:r,templateName:n};n=o}else if(1===s.length)n=s[0].name;else{const{selectedTemplateName:e}=await t({type:"select",name:"selectedTemplateName",message:"What would you want to create?",hint:"Select using arrows and press Enter",choices:s.map((e=>({title:e.name,value:e.name}))),initial:0},i());n=e}const a=s.find((e=>e.name===n));if(a){const e={...r};return e.templates=a.files,a.folderPath&&(e.folderPath=a.folderPath),{config:e,templateName:a.name}}}return{config:r,templateName:n}})({commandLineFlags:c,config:p});p=f;const g=await(async({root:t,commandLineFlags:{dest:s},config:{folderPath:n,multiProject:a}})=>{if(!s)return{project:""};const i=r.isAbsolute(s)?s:r.resolve(t,s);if(!o.existsSync(i))return console.error(e.red("Error: Path doesn't exist:")),console.error(e.yellow(i)),process.exit(),{project:""};let l=r.relative(t,i);if(l===i||l.startsWith(".."))return console.error(e.red("Error: component destination must be in project")),process.exit(),{project:""};let c="";if(a){const[e,...t]=l.split(r.sep);c=e,l=t.join(r.sep)}const p=("string"==typeof n?[n]:n).map((e=>r.join(e).replace(/[\\/]$/,""))).filter((e=>o.existsSync(r.resolve(t,c,e)))).find((e=>l.startsWith(e)));if(!p)return console.error(e.red("Error: component destination must match to folderPath configuration parameter")),process.exit(),{project:""};const d=r.relative(r.resolve(t,c,p),i);return{project:c,projectRootPath:m(p),resultPath:m(d)}})({root:s,commandLineFlags:c,config:p}),h=await(async({project:s,root:n,commandLineFlags:a,config:{multiProject:c,folderPath:m},templateName:p})=>{let f="";if(s)return T(s),s;if(a.dest||!c)return"";if(a.project&&(f=a.project,T(f)),!f&&c){const s=await o.promises.readdir(r.resolve(n)).then((e=>e.filter((e=>l(r.join(n,e)))).filter((e=>Array.isArray(m)?m.some((t=>o.existsSync(r.resolve(n,e,t)))):o.existsSync(r.resolve(n,e,m))))));if(0===s.length)return console.error(`${e.red("There is no projects with the following path:\n")}${e.yellow(Array.isArray(m)?m.join("\n"):m)}`),process.exit(),"";if(1===s.length)return d(`Creating ${p} for ${e.yellow(s[0])} project`),s[0];const{selectedProject:a}=await t({type:"select",name:"selectedProject",message:"Please, select the project",choices:s.map((e=>({title:e,value:e}))),initial:0},i());f=a}return Array.isArray(m)&&m.some((e=>o.existsSync(r.resolve(n,f,e))))||!Array.isArray(m)&&o.existsSync(r.resolve(n,f,m))?f:(console.error(e.red(`Error: There is no folder for ${p} in ${e.yellow(f)} project`),m),process.exit(),"")})({project:g.project,root:s,commandLineFlags:c,config:p,templateName:u}),{componentNames:y,resultPath:j,projectRootPath:w}=await P({root:s,commandLineFlags:c,config:p,project:h,templateName:u,resultPathInput:g.resultPath,projectRootPathInput:g.projectRootPath});await(async({componentNames:e,projectRootPath:s,resultPath:n,commandLineFlags:{update:a},config:{checkExistenceOnCreate:l}})=>{if(!l||a)return;const c=e.map((e=>({name:e,exist:o.existsSync(r.resolve(s,n,e))}))),m=c.reduce(((e,{exist:t})=>e+(t?1:0)),0);if(m<=0)return;const{agree:p}=await t({type:"toggle",name:"agree",message:`Component${m>1?"s":""} ${c.filter((e=>e.exist)).map((e=>e.name)).join(", ")} ${m>1?"are":"is"} already exist. Do you want to replace?`,initial:!1,active:"Yes",inactive:"No"},i());p||process.exit()})({componentNames:y,commandLineFlags:c,resultPath:j,projectRootPath:w,config:p}),await W({root:s,moduleRoot:n,commandLineFlags:c,config:p,project:h,templateName:u,componentNames:y,resultPath:j,projectRootPath:w})}catch(t){console.error(e.red("Unexpected error"),t),process.exit()}})();
